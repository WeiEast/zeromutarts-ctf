
serial:     file format elf32-i386


Disassembly of section .init:

080482f4 <_init>:
 80482f4:	53                   	push   %ebx
 80482f5:	83 ec 08             	sub    $0x8,%esp
 80482f8:	e8 b3 00 00 00       	call   80483b0 <__x86.get_pc_thunk.bx>
 80482fd:	81 c3 23 16 00 00    	add    $0x1623,%ebx
 8048303:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 8048309:	85 c0                	test   %eax,%eax
 804830b:	74 05                	je     8048312 <_init+0x1e>
 804830d:	e8 3e 00 00 00       	call   8048350 <__gmon_start__@plt>
 8048312:	83 c4 08             	add    $0x8,%esp
 8048315:	5b                   	pop    %ebx
 8048316:	c3                   	ret    

Disassembly of section .plt:

08048320 <printf@plt-0x10>:
 8048320:	ff 35 24 99 04 08    	pushl  0x8049924
 8048326:	ff 25 28 99 04 08    	jmp    *0x8049928
 804832c:	00 00                	add    %al,(%eax)
	...

08048330 <printf@plt>:
 8048330:	ff 25 2c 99 04 08    	jmp    *0x804992c
 8048336:	68 00 00 00 00       	push   $0x0
 804833b:	e9 e0 ff ff ff       	jmp    8048320 <_init+0x2c>

08048340 <puts@plt>:
 8048340:	ff 25 30 99 04 08    	jmp    *0x8049930
 8048346:	68 08 00 00 00       	push   $0x8
 804834b:	e9 d0 ff ff ff       	jmp    8048320 <_init+0x2c>

08048350 <__gmon_start__@plt>:
 8048350:	ff 25 34 99 04 08    	jmp    *0x8049934
 8048356:	68 10 00 00 00       	push   $0x10
 804835b:	e9 c0 ff ff ff       	jmp    8048320 <_init+0x2c>

08048360 <__libc_start_main@plt>:
 8048360:	ff 25 38 99 04 08    	jmp    *0x8049938
 8048366:	68 18 00 00 00       	push   $0x18
 804836b:	e9 b0 ff ff ff       	jmp    8048320 <_init+0x2c>

08048370 <__isoc99_scanf@plt>:
 8048370:	ff 25 3c 99 04 08    	jmp    *0x804993c
 8048376:	68 20 00 00 00       	push   $0x20
 804837b:	e9 a0 ff ff ff       	jmp    8048320 <_init+0x2c>

Disassembly of section .text:

08048380 <_start>:
 8048380:	31 ed                	xor    %ebp,%ebp
 8048382:	5e                   	pop    %esi
 8048383:	89 e1                	mov    %esp,%ecx
 8048385:	83 e4 f0             	and    $0xfffffff0,%esp
 8048388:	50                   	push   %eax
 8048389:	54                   	push   %esp
 804838a:	52                   	push   %edx
 804838b:	68 60 86 04 08       	push   $0x8048660
 8048390:	68 f0 85 04 08       	push   $0x80485f0
 8048395:	51                   	push   %ecx
 8048396:	56                   	push   %esi
 8048397:	68 7d 84 04 08       	push   $0x804847d
 804839c:	e8 bf ff ff ff       	call   8048360 <__libc_start_main@plt>
 80483a1:	f4                   	hlt    
 80483a2:	66 90                	xchg   %ax,%ax
 80483a4:	66 90                	xchg   %ax,%ax
 80483a6:	66 90                	xchg   %ax,%ax
 80483a8:	66 90                	xchg   %ax,%ax
 80483aa:	66 90                	xchg   %ax,%ax
 80483ac:	66 90                	xchg   %ax,%ax
 80483ae:	66 90                	xchg   %ax,%ax

080483b0 <__x86.get_pc_thunk.bx>:
 80483b0:	8b 1c 24             	mov    (%esp),%ebx
 80483b3:	c3                   	ret    
 80483b4:	66 90                	xchg   %ax,%ax
 80483b6:	66 90                	xchg   %ax,%ax
 80483b8:	66 90                	xchg   %ax,%ax
 80483ba:	66 90                	xchg   %ax,%ax
 80483bc:	66 90                	xchg   %ax,%ax
 80483be:	66 90                	xchg   %ax,%ax

080483c0 <deregister_tm_clones>:
 80483c0:	b8 4b 99 04 08       	mov    $0x804994b,%eax
 80483c5:	2d 48 99 04 08       	sub    $0x8049948,%eax
 80483ca:	83 f8 06             	cmp    $0x6,%eax
 80483cd:	77 01                	ja     80483d0 <deregister_tm_clones+0x10>
 80483cf:	c3                   	ret    
 80483d0:	b8 00 00 00 00       	mov    $0x0,%eax
 80483d5:	85 c0                	test   %eax,%eax
 80483d7:	74 f6                	je     80483cf <deregister_tm_clones+0xf>
 80483d9:	55                   	push   %ebp
 80483da:	89 e5                	mov    %esp,%ebp
 80483dc:	83 ec 18             	sub    $0x18,%esp
 80483df:	c7 04 24 48 99 04 08 	movl   $0x8049948,(%esp)
 80483e6:	ff d0                	call   *%eax
 80483e8:	c9                   	leave  
 80483e9:	c3                   	ret    
 80483ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

080483f0 <register_tm_clones>:
 80483f0:	b8 48 99 04 08       	mov    $0x8049948,%eax
 80483f5:	2d 48 99 04 08       	sub    $0x8049948,%eax
 80483fa:	c1 f8 02             	sar    $0x2,%eax
 80483fd:	89 c2                	mov    %eax,%edx
 80483ff:	c1 ea 1f             	shr    $0x1f,%edx
 8048402:	01 d0                	add    %edx,%eax
 8048404:	d1 f8                	sar    %eax
 8048406:	75 01                	jne    8048409 <register_tm_clones+0x19>
 8048408:	c3                   	ret    
 8048409:	ba 00 00 00 00       	mov    $0x0,%edx
 804840e:	85 d2                	test   %edx,%edx
 8048410:	74 f6                	je     8048408 <register_tm_clones+0x18>
 8048412:	55                   	push   %ebp
 8048413:	89 e5                	mov    %esp,%ebp
 8048415:	83 ec 18             	sub    $0x18,%esp
 8048418:	89 44 24 04          	mov    %eax,0x4(%esp)
 804841c:	c7 04 24 48 99 04 08 	movl   $0x8049948,(%esp)
 8048423:	ff d2                	call   *%edx
 8048425:	c9                   	leave  
 8048426:	c3                   	ret    
 8048427:	89 f6                	mov    %esi,%esi
 8048429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048430 <__do_global_dtors_aux>:
 8048430:	80 3d 48 99 04 08 00 	cmpb   $0x0,0x8049948
 8048437:	75 13                	jne    804844c <__do_global_dtors_aux+0x1c>
 8048439:	55                   	push   %ebp
 804843a:	89 e5                	mov    %esp,%ebp
 804843c:	83 ec 08             	sub    $0x8,%esp
 804843f:	e8 7c ff ff ff       	call   80483c0 <deregister_tm_clones>
 8048444:	c6 05 48 99 04 08 01 	movb   $0x1,0x8049948
 804844b:	c9                   	leave  
 804844c:	f3 c3                	repz ret 
 804844e:	66 90                	xchg   %ax,%ax

08048450 <frame_dummy>:
 8048450:	a1 30 98 04 08       	mov    0x8049830,%eax
 8048455:	85 c0                	test   %eax,%eax
 8048457:	74 1f                	je     8048478 <frame_dummy+0x28>
 8048459:	b8 00 00 00 00       	mov    $0x0,%eax
 804845e:	85 c0                	test   %eax,%eax
 8048460:	74 16                	je     8048478 <frame_dummy+0x28>
 8048462:	55                   	push   %ebp
 8048463:	89 e5                	mov    %esp,%ebp
 8048465:	83 ec 18             	sub    $0x18,%esp
 8048468:	c7 04 24 30 98 04 08 	movl   $0x8049830,(%esp)
 804846f:	ff d0                	call   *%eax
 8048471:	c9                   	leave  
 8048472:	e9 79 ff ff ff       	jmp    80483f0 <register_tm_clones>
 8048477:	90                   	nop
 8048478:	e9 73 ff ff ff       	jmp    80483f0 <register_tm_clones>

0804847d <main>:
 804847d:	55                   	push   %ebp
 804847e:	89 e5                	mov    %esp,%ebp
 8048480:	83 e4 f0             	and    $0xfffffff0,%esp
 8048483:	83 ec 30             	sub    $0x30,%esp
 8048486:	c7 04 24 80 86 04 08 	movl   $0x8048680,(%esp)
 804848d:	e8 ae fe ff ff       	call   8048340 <puts@plt>
 8048492:	8d 44 24 1c          	lea    0x1c(%esp),%eax
 8048496:	89 44 24 04          	mov    %eax,0x4(%esp)
 804849a:	c7 04 24 c9 86 04 08 	movl   $0x80486c9,(%esp)
 80484a1:	e8 ca fe ff ff       	call   8048370 <__isoc99_scanf@plt>
 80484a6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80484aa:	85 c0                	test   %eax,%eax
 80484ac:	7f 16                	jg     80484c4 <main+0x47>
 80484ae:	c7 04 24 cc 86 04 08 	movl   $0x80486cc,(%esp)
 80484b5:	e8 86 fe ff ff       	call   8048340 <puts@plt>
 80484ba:	b8 00 00 00 00       	mov    $0x0,%eax
 80484bf:	e9 29 01 00 00       	jmp    80485ed <main+0x170>
 80484c4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80484c8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80484cc:	c7 04 24 d9 86 04 08 	movl   $0x80486d9,(%esp)
 80484d3:	e8 58 fe ff ff       	call   8048330 <printf@plt>
 80484d8:	c7 04 24 f4 86 04 08 	movl   $0x80486f4,(%esp)
 80484df:	e8 5c fe ff ff       	call   8048340 <puts@plt>
 80484e4:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
 80484eb:	00 
 80484ec:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
 80484f3:	00 
 80484f4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
 80484fb:	00 
 80484fc:	8d 44 24 10          	lea    0x10(%esp),%eax
 8048500:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048504:	8d 44 24 14          	lea    0x14(%esp),%eax
 8048508:	89 44 24 08          	mov    %eax,0x8(%esp)
 804850c:	8d 44 24 18          	lea    0x18(%esp),%eax
 8048510:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048514:	c7 04 24 19 87 04 08 	movl   $0x8048719,(%esp)
 804851b:	e8 50 fe ff ff       	call   8048370 <__isoc99_scanf@plt>
 8048520:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048524:	85 c0                	test   %eax,%eax
 8048526:	7e 18                	jle    8048540 <main+0xc3>
 8048528:	8b 44 24 18          	mov    0x18(%esp),%eax
 804852c:	85 c0                	test   %eax,%eax
 804852e:	7e 10                	jle    8048540 <main+0xc3>
 8048530:	8b 44 24 14          	mov    0x14(%esp),%eax
 8048534:	85 c0                	test   %eax,%eax
 8048536:	7e 08                	jle    8048540 <main+0xc3>
 8048538:	8b 44 24 10          	mov    0x10(%esp),%eax
 804853c:	85 c0                	test   %eax,%eax
 804853e:	7f 16                	jg     8048556 <main+0xd9>
 8048540:	c7 04 24 22 87 04 08 	movl   $0x8048722,(%esp)
 8048547:	e8 f4 fd ff ff       	call   8048340 <puts@plt>
 804854c:	b8 00 00 00 00       	mov    $0x0,%eax
 8048551:	e9 97 00 00 00       	jmp    80485ed <main+0x170>
 8048556:	8b 54 24 1c          	mov    0x1c(%esp),%edx
 804855a:	89 d0                	mov    %edx,%eax
 804855c:	c1 e0 02             	shl    $0x2,%eax
 804855f:	01 d0                	add    %edx,%eax
 8048561:	01 c0                	add    %eax,%eax
 8048563:	83 c0 2a             	add    $0x2a,%eax
 8048566:	c1 e0 04             	shl    $0x4,%eax
 8048569:	89 44 24 24          	mov    %eax,0x24(%esp)
 804856d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048571:	69 c0 b6 07 00 00    	imul   $0x7b6,%eax,%eax
 8048577:	05 d2 71 01 00       	add    $0x171d2,%eax
 804857c:	89 44 24 20          	mov    %eax,0x20(%esp)
 8048580:	c7 44 24 2c 18 02 00 	movl   $0x218,0x2c(%esp)
 8048587:	00 
 8048588:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
 804858f:	00 
 8048590:	eb 0f                	jmp    80485a1 <main+0x124>
 8048592:	83 44 24 2c 05       	addl   $0x5,0x2c(%esp)
 8048597:	83 6c 24 2c 03       	subl   $0x3,0x2c(%esp)
 804859c:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
 80485a1:	83 7c 24 28 09       	cmpl   $0x9,0x28(%esp)
 80485a6:	7e ea                	jle    8048592 <main+0x115>
 80485a8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80485ac:	01 44 24 2c          	add    %eax,0x2c(%esp)
 80485b0:	8b 44 24 18          	mov    0x18(%esp),%eax
 80485b4:	39 44 24 24          	cmp    %eax,0x24(%esp)
 80485b8:	75 22                	jne    80485dc <main+0x15f>
 80485ba:	8b 44 24 14          	mov    0x14(%esp),%eax
 80485be:	39 44 24 20          	cmp    %eax,0x20(%esp)
 80485c2:	75 18                	jne    80485dc <main+0x15f>
 80485c4:	8b 44 24 10          	mov    0x10(%esp),%eax
 80485c8:	39 44 24 2c          	cmp    %eax,0x2c(%esp)
 80485cc:	75 0e                	jne    80485dc <main+0x15f>
 80485ce:	c7 04 24 33 87 04 08 	movl   $0x8048733,(%esp)
 80485d5:	e8 66 fd ff ff       	call   8048340 <puts@plt>
 80485da:	eb 0c                	jmp    80485e8 <main+0x16b>
 80485dc:	c7 04 24 40 87 04 08 	movl   $0x8048740,(%esp)
 80485e3:	e8 58 fd ff ff       	call   8048340 <puts@plt>
 80485e8:	b8 00 00 00 00       	mov    $0x0,%eax
 80485ed:	c9                   	leave  
 80485ee:	c3                   	ret    
 80485ef:	90                   	nop

080485f0 <__libc_csu_init>:
 80485f0:	55                   	push   %ebp
 80485f1:	57                   	push   %edi
 80485f2:	31 ff                	xor    %edi,%edi
 80485f4:	56                   	push   %esi
 80485f5:	53                   	push   %ebx
 80485f6:	e8 b5 fd ff ff       	call   80483b0 <__x86.get_pc_thunk.bx>
 80485fb:	81 c3 25 13 00 00    	add    $0x1325,%ebx
 8048601:	83 ec 1c             	sub    $0x1c,%esp
 8048604:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048608:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804860e:	e8 e1 fc ff ff       	call   80482f4 <_init>
 8048613:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048619:	29 c6                	sub    %eax,%esi
 804861b:	c1 fe 02             	sar    $0x2,%esi
 804861e:	85 f6                	test   %esi,%esi
 8048620:	74 27                	je     8048649 <__libc_csu_init+0x59>
 8048622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048628:	8b 44 24 38          	mov    0x38(%esp),%eax
 804862c:	89 2c 24             	mov    %ebp,(%esp)
 804862f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048633:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048637:	89 44 24 04          	mov    %eax,0x4(%esp)
 804863b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048642:	83 c7 01             	add    $0x1,%edi
 8048645:	39 f7                	cmp    %esi,%edi
 8048647:	75 df                	jne    8048628 <__libc_csu_init+0x38>
 8048649:	83 c4 1c             	add    $0x1c,%esp
 804864c:	5b                   	pop    %ebx
 804864d:	5e                   	pop    %esi
 804864e:	5f                   	pop    %edi
 804864f:	5d                   	pop    %ebp
 8048650:	c3                   	ret    
 8048651:	eb 0d                	jmp    8048660 <__libc_csu_fini>
 8048653:	90                   	nop
 8048654:	90                   	nop
 8048655:	90                   	nop
 8048656:	90                   	nop
 8048657:	90                   	nop
 8048658:	90                   	nop
 8048659:	90                   	nop
 804865a:	90                   	nop
 804865b:	90                   	nop
 804865c:	90                   	nop
 804865d:	90                   	nop
 804865e:	90                   	nop
 804865f:	90                   	nop

08048660 <__libc_csu_fini>:
 8048660:	f3 c3                	repz ret 

Disassembly of section .fini:

08048664 <_fini>:
 8048664:	53                   	push   %ebx
 8048665:	83 ec 08             	sub    $0x8,%esp
 8048668:	e8 43 fd ff ff       	call   80483b0 <__x86.get_pc_thunk.bx>
 804866d:	81 c3 b3 12 00 00    	add    $0x12b3,%ebx
 8048673:	83 c4 08             	add    $0x8,%esp
 8048676:	5b                   	pop    %ebx
 8048677:	c3                   	ret    
